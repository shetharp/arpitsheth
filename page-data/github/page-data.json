{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/github","result":{"data":{"post":{"__typename":"MdxPost","slug":"/github","title":"Github","date":"16-Aug-2020","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Github\",\n  \"date\": \"2020-08-16T00:00:00.000Z\",\n  \"tags\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Remove a file from a pushed commit\"), mdx(\"p\", null, \"Sometimes you may accidentally commit changes to a file and push it to GitHub. Because this file wasn't supposed to be modified and committed, you may be asked to remove the file from your commit or pull request.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Go to your git directory and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cd\"), \" to the location of the file you want to remove from your commit\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout origin/develop package-lock.json\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package-lock.json\"), \" is the name of the file you want to revert changes to\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"origin/develop\"), \" is the name of the remote branch on github you want your file to revert back to\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"By doing this, your file no longer has any differences with the branch you are looking to merge onto\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git commit -m \\\"Removes package-lock.json\\\"\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git push\"))), mdx(\"h2\", null, \"Reset to a branch from remote\"), mdx(\"p\", null, \"Sometimes you just want to reset your working branch back to how things were when they were last pushed up to GitHub\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git reset --hard origin/NAME-OF-BRANCH\\n\")), mdx(\"h2\", null, \"Rebasing the base branch\"), mdx(\"p\", null, \"Let's say you are working on a new feature \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" in branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featA\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"develop: --1--2--4--6--7\\nfeatA:     \\\\--3--5\\n\")), mdx(\"p\", null, \"But then, you need to begin working on feature \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" which builds on top of feature \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", before feature \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" has been merged into develop.\"), mdx(\"p\", null, \"So, you create a new branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\"), \" based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featA\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"develop: --1--2--4--6--7\\nfeatA:     \\\\--3--5\\nfeatB:           \\\\--8\\n\")), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featA\"), \" has new commits, you can simply rebase them onto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\")), mdx(\"p\", null, \"While you are on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\"), \" branch run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git rebase featA\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"develop: --1--2--4--6--7\\nfeatA:     \\\\--3--5--9\\nfeatB:              \\\\--8\\n\")), mdx(\"p\", null, \"Then, suppose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featA\"), \" is complete and gets squashed and merged into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"develop: --1--2--4--6--7--10\\nfeatA:     \\\\--3--5--9----/\\nfeatB:              \\\\--8\\n\")), mdx(\"p\", null, \"After \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featA\"), \" gets squashed and merged, it is often safely deleted.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"develop: --1--2--4--6--7--10\\nfeatA:\\nfeatB:     \\\\--3--5--9--8\\n\")), mdx(\"p\", null, \"Now, you'll want to rebase \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\"), \" and make it based off of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featA\"), \" since all that work has been merged in.\"), mdx(\"p\", null, \"Notice how the commits with hash \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"9\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\"), \" are redundant since they have already been squashed and merged into commit with hash \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"10\"), \". This means we can safely drop commits \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"9\"), \" as long as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\"), \" is based off of commit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"10\"), \" (or later) on the develop branch. The new work is on commit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8\"), \" and later.\"), mdx(\"p\", null, \"While in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\"), \" branch, run the below command. (Replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3\"), \" with the appropriate commit hash for your branch).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git rebase -i 3\\n\")), mdx(\"p\", null, \"You'll get something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"pick 3 commit message\\npick 5 commit message\\npick 9 commit message\\npick 8 commit message\\n\")), mdx(\"p\", null, \"Edit and save the file to something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"d 3 commit message\\nd 5 commit message\\nd 9 commit message\\nb\\npick 8 commit message\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"d\"), \" command is short for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drop\"), \". This means we will drop that commit and lose it. Since commits \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"9\"), \" are merged and squashed into commit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"10\"), \" (on develop), this is fine.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" command is short for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"break\"), \". This pauses the interactive rebase at this step.\"), mdx(\"p\", null, \"When the interactive rebase stops at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"break\"), \", we will merge in our work from the develop branch.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git merge origin/develop\\n\")), mdx(\"p\", null, \"There shouldn't be any merge conflicts at this point because we haven't applied any new work on top of this detached branch.\"), mdx(\"p\", null, \"Then, continue our rebase with the new work we did on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git rebase --continue\\n\")), mdx(\"p\", null, \"Now our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featB\"), \" branch should be rebased off of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"develop: --1--2--4--6--7--10\\nfeatB:                     \\\\--8\\n\")), mdx(\"p\", null, \"Check if everything is working!! Then, force push this up to your remote repository.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git push --force\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"If you mess up trying to rebase \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"featB\"), \" follow these steps:\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Checkout to another branch. Ex \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout develop\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Delete your local \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"featB\"), \" branch. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git branch -D featB\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pull down the remote \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"featB\"), \" branch. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout -b origin/featB\"))), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Resources:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[https://www.git-tower.com/blog/git-cheat-sheet]\", \"(Git Cheat Sheet)\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Remove a file from a pushed commit Sometimes you may accidentally commit changes to a file and push it to GitHub. Because this file wasn't…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/github","formatString":"DD-MMM-YYYY"}},"staticQueryHashes":["318001574","318001574","3745525319","3745525319","383597242","383597242"]}